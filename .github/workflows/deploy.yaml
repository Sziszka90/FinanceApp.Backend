name: Build and Deploy to Azure Container Apps
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "production"
jobs:
  unit-test-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Install reportgenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Run unit tests with coverage
        run: |
          dotnet test ./FinanceApp.Backend.Testing.Unit/FinanceApp.Backend.Testing.Unit.csproj \
            --collect:"XPlat Code Coverage" \
            /p:CoverletOutput=./TestResults/coverage/ \
            /p:CoverletOutputFormat=cobertura

      - name: Check coverage threshold
        run: |
          echo "The folder contains the following files:"
          ls -l
          echo "----------------"
          xmlfile=$(find FinanceApp.Backend.Testing.Unit/TestResults/ -name '*.xml' | head -n 1)
          echo "Using coverage XML: $xmlfile"
          coverage=$(xmllint --xpath "string(/coverage/@line-rate)" "$xmlfile")
          coverage_percent=$(awk "BEGIN {print $coverage * 100}")
          echo "Coverage is $coverage_percent%"
          threshold=60
          coverage_int=${coverage_percent%.*}  # integer part

          # if [ "$coverage_int" -lt "$threshold" ]; then
          #   echo "Code coverage $coverage_int% is below threshold $threshold%"
          #   exit 1
          # fi
        shell: bash

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: TestResults/coverage-report

  api-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run API tests
        run: |
          echo "Running only API tests..."
          dotnet test --configuration Release --filter FullyQualifiedName~Api --logger trx

  build-and-push:
    runs-on: ubuntu-latest
    needs: [api-test, unit-test-and-coverage]
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push .NET image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$OWNER/finance-app-backend:${GITHUB_RUN_NUMBER} -f Backend.Dockerfile .
          docker push ghcr.io/$OWNER/finance-app-backend:${GITHUB_RUN_NUMBER}

      - name: Build and Push Gateway image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$OWNER/finance-app-gateway:${GITHUB_RUN_NUMBER} -f Gateway.Dockerfile .
          docker push ghcr.io/$OWNER/finance-app-gateway:${GITHUB_RUN_NUMBER}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upgrade Azure Container Apps extension
        run: |
          az extension add --name containerapp --upgrade --yes

      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Run EF Core Migrations (custom script)
        run: |
          chmod +x ./scripts/run-migration.sh
          ./scripts/run-migration.sh mssql "${{ secrets.DB_CONNECTION_STRING }}"

      - name: Update Azure Container App (Backend)
        run: |
          set -x
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          az containerapp update \
            --name finance-app-backend \
            --resource-group projects \
            --image ghcr.io/$OWNER/finance-app-backend:${GITHUB_RUN_NUMBER} \
            --set-env-vars \
              ConnectionStrings__MsSql='${{ secrets.DB_CONNECTION_STRING }}' \
              AuthenticationSettings__SecretKey='${{ secrets.SECRET_KEY }}' \
              AuthenticationSettings__Audience='${{ vars.AUDIENCE }}' \
              AuthenticationSettings__Issuer='${{ vars.ISSUER }}' \
              SmtpSettings__SmtpHost='${{ vars.SMTP_HOST }}' \
              SmtpSettings__SmtpPort='${{ vars.SMTP_PORT }}' \
              SmtpSettings__SmtpUser='${{ secrets.SMTP_USER }}' \
              SmtpSettings__SmtpPass='${{ secrets.SMTP_PASSWORD }}' \
              SmtpSettings__FromEmail='${{ secrets.SMTP_FROM_EMAIL }}' \
              ExchangeRateSettings__ApiUrl='${{ vars.EXCHANGE_RATE_API_URL }}' \
              ExchangeRateSettings__ApiEndpoint='${{ vars.EXCHANGE_RATE_API_ENDPOINT }}' \
              ExchangeRateSettings__AppId='${{ secrets.EXCHANGE_RATE_APP_ID }}' \
              RabbitMqSettings__HostName='${{ vars.RABBITMQ_HOST }}' \
              RabbitMqSettings__Port='${{ vars.RABBITMQ_PORT }}' \
              RabbitMqSettings__UserName='${{ secrets.RABBITMQ_USER }}' \
              RabbitMqSettings__Password='${{ secrets.RABBITMQ_PASS }}' \
              LLMProcessorSettings__Token='${{ secrets.LLM_PROCESSOR_TOKEN }}' \
              LLMProcessorSettings__ApiUrl='${{ vars.LLM_PROCESSOR_API_URL }}' \
              CacheSettings__ConnectionString='${{ secrets.CACHE_CONNECTION_STRING }}' \

      - name: Update Azure Container App (Gateway)
        run: |
          set -x
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          az containerapp update \
            --name finance-app-gateway \
            --resource-group projects \
            --image ghcr.io/$OWNER/finance-app-gateway:${GITHUB_RUN_NUMBER}
