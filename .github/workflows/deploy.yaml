name: Build and Deploy to Azure Container Apps
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "production"

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Run code quality checks
        run: ./scripts/lint.sh

  test-and-coverage:
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      - name: Restore dependencies
        run: dotnet restore
      - name: Install reportgenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
      - name: Build
        run: dotnet build --no-restore --configuration Release
      - name: Run unit tests with coverage
        run: |
          dotnet test ./FinanceApp.Backend.Testing.Unit/FinanceApp.Backend.Testing.Unit.csproj \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            /p:CoverletOutput=./TestResults/unit-coverage/ \
            /p:CoverletOutputFormat=cobertura \
            '/p:Include="[FinanceApp.Backend.Application]*,[FinanceApp.Backend.Domain]*"' \
            '/p:ExcludeByAssembly="FinanceApp.Backend.Infrastructure.EntityFramework.Sqlite,FinanceApp.Backend.Infrastructure.EntityFramework.Common,FinanceApp.Backend.Infrastructure.EntityFramework.Mssql,FinanceApp.Backend.Infrastructure.RabbitMq,FinanceApp.Backend.Infrastructure.Cache,FinanceApp.Backend.Infrastructure,FinanceApp.Backend.Presentation.WebApi,FinanceApp.Backend.Testing.Unit,FinanceApp.Backend.Testing.Api"'
      - name: Run API tests with coverage
        run: |
          dotnet test ./FinanceApp.Backend.Testing.Api/FinanceApp.Backend.Testing.Api.csproj \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            /p:CoverletOutput=./TestResults/api-coverage/ \
            /p:CoverletOutputFormat=cobertura \
            '/p:Include="[FinanceApp.Backend.Application]*,[FinanceApp.Backend.Domain]*"' \
            '/p:ExcludeByAssembly="FinanceApp.Backend.Infrastructure.EntityFramework.Sqlite,FinanceApp.Backend.Infrastructure.EntityFramework.Common,FinanceApp.Backend.Infrastructure.EntityFramework.Mssql,FinanceApp.Backend.Infrastructure.RabbitMq,FinanceApp.Backend.Infrastructure.Cache,FinanceApp.Backend.Infrastructure,FinanceApp.Backend.Presentation.WebApi,FinanceApp.Backend.Testing.Unit,FinanceApp.Backend.Testing.Api"'
      - name: Generate combined coverage report
        run: |
          unit_xmlfile=$(find FinanceApp.Backend.Testing.Unit/TestResults/ -name '*.xml' | head -n 1)
          api_xmlfile=$(find FinanceApp.Backend.Testing.Api/TestResults/ -name '*.xml' | head -n 1)
          echo "Using unit test coverage XML: $unit_xmlfile"
          echo "Using API test coverage XML: $api_xmlfile"
          reportgenerator \
            -reports:"$unit_xmlfile;$api_xmlfile" \
            -targetdir:"coverage-report" \
            -reporttypes:"Html;TextSummary;Cobertura" \
            -assemblyfilters:"+FinanceApp.Backend.Application;+FinanceApp.Backend.Domain;-FinanceApp.Backend.Infrastructure*;-FinanceApp.Backend.Testing*" \
            -classfilters:"-*Migrations*" \
            -title:"Combined Unit & API Test Coverage Report"
          echo "=== Combined Coverage Summary (Unit + API Tests) ==="
          cat coverage-report/Summary.txt
        shell: bash
      - name: Check coverage threshold
        run: |
          method_coverage=$(grep "Method coverage:" coverage-report/Summary.txt | grep -o '[0-9.]*%' | head -1 | tr -d '%')
          echo "Method Coverage (Application + Domain): ${method_coverage}%"
          threshold=80
          coverage_int=${method_coverage%.*}
          if [ "$coverage_int" -lt "$threshold" ]; then
            echo "❌ Combined coverage $coverage_int% is below threshold $threshold%"
            exit 1
          else
            echo "✅ Combined coverage $coverage_int% meets threshold $threshold%"
          fi
        shell: bash
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-reports
          path: |
            FinanceApp.Backend.Testing.Unit/TestResults/**/*.xml
            FinanceApp.Backend.Testing.Api/TestResults/**/*.xml
            coverage-report/**/*

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-and-coverage]
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push .NET image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$OWNER/finance-app-backend:${GITHUB_RUN_NUMBER} -f Backend.Dockerfile .
          docker push ghcr.io/$OWNER/finance-app-backend:${GITHUB_RUN_NUMBER}
      - name: Build and Push Gateway image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$OWNER/finance-app-gateway:${GITHUB_RUN_NUMBER} -f Gateway.Dockerfile .
          docker push ghcr.io/$OWNER/finance-app-gateway:${GITHUB_RUN_NUMBER}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Upgrade Azure Container Apps extension
        run: |
          az extension add --name containerapp --upgrade --yes
      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Run EF Core Migrations (custom script)
        run: |
          chmod +x ./scripts/run-migration.sh
          ./scripts/run-migration.sh mssql "${{ secrets.DB_CONNECTION_STRING }}"
      - name: Update Azure Container App (Backend)
        run: |
          set -x
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          az containerapp update \
            --name finance-app-backend \
            --resource-group projects \
            --image ghcr.io/$OWNER/finance-app-backend:${GITHUB_RUN_NUMBER} \
            --set-env-vars \
              ConnectionStrings__MsSql='${{ secrets.DB_CONNECTION_STRING }}' \
              AuthenticationSettings__SecretKey='${{ secrets.SECRET_KEY }}' \
              AuthenticationSettings__Audience='${{ vars.AUDIENCE }}' \
              AuthenticationSettings__Issuer='${{ vars.ISSUER }}' \
              SmtpSettings__SmtpHost='${{ vars.SMTP_HOST }}' \
              SmtpSettings__SmtpPort='${{ vars.SMTP_PORT }}' \
              SmtpSettings__SmtpUser='${{ secrets.SMTP_USER }}' \
              SmtpSettings__SmtpPass='${{ secrets.SMTP_PASSWORD }}' \
              SmtpSettings__FromEmail='${{ secrets.SMTP_FROM_EMAIL }}' \
              ExchangeRateSettings__ApiUrl='${{ vars.EXCHANGE_RATE_API_URL }}' \
              ExchangeRateSettings__ApiEndpoint='${{ vars.EXCHANGE_RATE_API_ENDPOINT }}' \
              ExchangeRateSettings__AppId='${{ secrets.EXCHANGE_RATE_APP_ID }}' \
              RabbitMqSettings__HostName='${{ vars.RABBITMQ_HOST }}' \
              RabbitMqSettings__Port='${{ vars.RABBITMQ_PORT }}' \
              RabbitMqSettings__UserName='${{ secrets.RABBITMQ_USER }}' \
              RabbitMqSettings__Password='${{ secrets.RABBITMQ_PASS }}' \
              LLMProcessorSettings__Token='${{ secrets.LLM_PROCESSOR_TOKEN }}' \
              LLMProcessorSettings__ApiUrl='${{ vars.LLM_PROCESSOR_API_URL }}' \
              CacheSettings__ConnectionString='${{ secrets.CACHE_CONNECTION_STRING }}' \
      - name: Update Azure Container App (Gateway)
        run: |
          set -x
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          az containerapp update \
            --name finance-app-gateway \
            --resource-group projects \
            --image ghcr.io/$OWNER/finance-app-gateway:${GITHUB_RUN_NUMBER}
