// <auto-generated />
using System;
using System.Collections.Generic;
using FinanceApp.Infrastructure.EntityFramework.Sqlite.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceApp.Infrastructure.EntityFramework.Sqlite.Migrations
{
    [DbContext(typeof(FinanceAppSqliteDbContext))]
    [Migration("20250524191725_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("FinanceApp.Domain.Common.BaseTransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionGroup", (string)null);

                    b.HasDiscriminator<string>("GroupType").HasValue("BaseTransactionGroup");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.ExpenseTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseTransaction", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.IncomeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("IncomeTransaction", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.Investment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Investment", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.Saving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Saving", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BaseCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.ExpenseTransactionGroup", b =>
                {
                    b.HasBaseType("FinanceApp.Domain.Common.BaseTransactionGroup");

                    b.ComplexProperty<Dictionary<string, object>>("Limit", "FinanceApp.Domain.Entities.ExpenseTransactionGroup.Limit#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Currency")
                                .HasColumnType("INTEGER");
                        });

                    b.HasDiscriminator().HasValue("ExpenseTransactionGroup");
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.IncomeTransactionGroup", b =>
                {
                    b.HasBaseType("FinanceApp.Domain.Common.BaseTransactionGroup");

                    b.HasDiscriminator().HasValue("IncomeTransactionGroup");
                });

            modelBuilder.Entity("FinanceApp.Domain.Common.BaseTransactionGroup", b =>
                {
                    b.HasOne("FinanceApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.ExpenseTransaction", b =>
                {
                    b.HasOne("FinanceApp.Domain.Common.BaseTransactionGroup", "TransactionGroup")
                        .WithMany()
                        .HasForeignKey("TransactionGroupId");

                    b.HasOne("FinanceApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinanceApp.Domain.Entities.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("ExpenseTransactionId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.Property<int>("Currency")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Currency");

                            b1.HasKey("ExpenseTransactionId");

                            b1.ToTable("ExpenseTransaction");

                            b1.WithOwner()
                                .HasForeignKey("ExpenseTransactionId");
                        });

                    b.Navigation("TransactionGroup");

                    b.Navigation("User");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.IncomeTransaction", b =>
                {
                    b.HasOne("FinanceApp.Domain.Common.BaseTransactionGroup", "TransactionGroup")
                        .WithMany()
                        .HasForeignKey("TransactionGroupId");

                    b.HasOne("FinanceApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinanceApp.Domain.Entities.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("IncomeTransactionId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.Property<int>("Currency")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Currency");

                            b1.HasKey("IncomeTransactionId");

                            b1.ToTable("IncomeTransaction");

                            b1.WithOwner()
                                .HasForeignKey("IncomeTransactionId");
                        });

                    b.Navigation("TransactionGroup");

                    b.Navigation("User");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.Investment", b =>
                {
                    b.OwnsOne("FinanceApp.Domain.Entities.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("InvestmentId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Value_Amount");

                            b1.Property<int>("Currency")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Value_Currency");

                            b1.HasKey("InvestmentId");

                            b1.ToTable("Investment");

                            b1.WithOwner()
                                .HasForeignKey("InvestmentId");
                        });

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceApp.Domain.Entities.Saving", b =>
                {
                    b.OwnsOne("FinanceApp.Domain.Entities.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("SavingId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Value_Amount");

                            b1.Property<int>("Currency")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Value_Currency");

                            b1.HasKey("SavingId");

                            b1.ToTable("Saving");

                            b1.WithOwner()
                                .HasForeignKey("SavingId");
                        });

                    b.Navigation("Value")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
